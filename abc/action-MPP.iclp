#include "../input.lp".
#include <incmode>.



direction((X,Y)) :- X=-1..1, Y=-1..1, |X+Y|=1.

maxXposition(M) :- M = #max { X : position((X,_))}.
minXposition(M) :- M = #min { X : position((X,_))}.
maxYposition(M) :- M = #max { Y : position((_,Y))}.
minYposition(M) :- M = #min { Y : position((_,Y))}.

&dom{X..X} = positionX(R,0) :- position(R,(X,_),0), isRobot(R).
&dom{Y..Y} = positionY(R,0) :- position(R,(_,Y),0), isRobot(R).

&dom{X..X} = positionX(S,0) :- position(S,(X,_),0), isShelf(S).
&dom{Y..Y} = positionY(S,0) :- position(S,(_,Y),0), isShelf(S).

#program step(t).

&dom{M..N} = positionX(R,t) :- minXposition(M), maxXposition(N), isRobot(R).
&dom{M..N} = positionY(R,t) :- minYposition(M), maxYposition(N), isRobot(R).

&dom{M..N} = positionX(S,t) :- minXposition(M), maxXposition(N), isShelf(S).
&dom{M..N} = positionY(S,t) :- minYposition(M), maxYposition(N), isShelf(S).

 {    move(R,D,t) : direction(D) ;
    pickup(R,S,t) : isShelf(S)   ;
   putdown(R,S,t) : isShelf(S)   } 1 :- isRobot(R).

waits(R,t) :- not pickup(R,_,t), not putdown(R,_,t), not move(R,_,t), isRobot(R).

% - move/3 ----------------------------------------------------------------------
 :-     move(R,(D,0),t), &sum { positionX(R,t-1); D } != positionX(R,t).
 :-     move(R,(0,D),t), &sum { positionY(R,t-1); D } != positionY(R,t).

% - pickup/3 --------------------------------------------------------------------
 carries(R,S,t) :- pickup(R,S,t).
                :- pickup(R,S,t), carries(R,_,t-1).
                :- pickup(R,S,t), carries(_,S,t-1).                                                      % NEEDED!?
                :- pickup(R,S,t), &sum { positionX(R,t-1) } != positionX(S,t-1).
                :- pickup(R,S,t), &sum { positionY(R,t-1) } != positionY(S,t-1).

% - putdown/3 -------------------------------------------------------------------
                :- putdown(R,S,t), not carries(R,S,t-1).

% - serves/4 --------------------------------------------------------------------
serves(R,S,P,t) :- carries(R,S,t), &sum { positionX(R,t) } = X, &sum{ positionY(R,t) } = Y, position(P,(X,Y)), strategy.

% - inertia ---------------------------------------------------------------------
 :- not move(R,(_,0),t), &sum { positionX(R,t-1) } != positionX(R,t), isRobot(R).
 :- not move(R,(0,_),t), &sum { positionY(R,t-1) } != positionY(R,t), isRobot(R).

carries(R,S,t) :- carries(R,S,t-1), not putdown(R,S,t).

% - (in)direct effects ----------------------------------------------------------
 :-     carries(R,S,t), &sum { positionX(R,t  ) } != positionX(S,t).
 :-     carries(R,S,t), &sum { positionY(R,t  ) } != positionY(S,t).
 :- not carries(_,S,t), &sum { positionX(S,t-1) } != positionX(S,t), isShelf(S).
 :- not carries(_,S,t), &sum { positionY(S,t-1) } != positionY(S,t), isShelf(S).

% - edge collision --------------------------------------------------------------
:- &sum { positionX(R ,t-1) } = positionX(R',t), &sum { positionY(R ,t-1) } = positionY(R',t),
   &sum { positionX(R',t-1) } = positionX(R ,t), &sum { positionY(R',t-1) } = positionY(R ,t),
   R > R', isRobot(R), isRobot(R').

% - vertex collision ------------------------------------------------------------
:- &sum { positionX(R,t) } = positionX(R',t),
   &sum { positionY(R,t) } = positionY(R',t), R > R', isRobot(R), isRobot(R').
:- &sum { positionX(S,t) } = positionX(S',t),
   &sum { positionY(S,t) } = positionY(S',t), S > S', isShelf(S), isShelf(S').

% - auxiliaries -----------------------------------------------------------------
 :- { carries(R,S,t) } > 1, isRobot(R).
 :- { carries(R,S,t) } > 1, isShelf(S).
